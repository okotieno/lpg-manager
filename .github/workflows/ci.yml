name: CI MAIN

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  LPG_ENVIRONMENT: ${{ secrets.LPG_ENVIRONMENT }}
  LPG_JWT_SECRET: ${{ secrets.LPG_JWT_SECRET }}
  LPG_EXPIRY_PERIOD_ACCESS_TOKEN: ${{ secrets.LPG_EXPIRY_PERIOD_ACCESS_TOKEN }}
  LPG_DATABASE_DIALECT: ${{ secrets.LPG_DATABASE_DIALECT }}
  LPG_DATABASE_HOST: ${{ secrets.LPG_DATABASE_HOST }}
  LPG_DATABASE_PORT: ${{ secrets.LPG_DATABASE_PORT }}
  LPG_DATABASE_USERNAME: ${{ secrets.LPG_DATABASE_USERNAME }}
  LPG_DATABASE_PASSWORD: ${{ secrets.LPG_DATABASE_PASSWORD }}
  LPG_DATABASE_DATABASE: ${{ secrets.LPG_DATABASE_DATABASE }}
  LPG_MAIL_HOST: ${{ secrets.LPG_MAIL_HOST }}
  LPG_MAIL_PORT: ${{ secrets.LPG_MAIL_PORT }}
  LPG_MAIL_USERNAME: ${{ secrets.LPG_MAIL_USERNAME }}
  LPG_MAIL_PASSWORD: ${{ secrets.LPG_MAIL_PASSWORD }}
  LPG_MAIL_FROM: ${{ secrets.LPG_MAIL_FROM }}
  LPG_BACKEND_PORT: ${{ secrets.LPG_BACKEND_PORT }}
  LPG_MINIO_ENDPOINT: ${{ secrets.LPG_MINIO_ENDPOINT }}
  LPG_MINIO_PORT: ${{ secrets.LPG_MINIO_PORT }}
  LPG_MINIO_ACCESS_KEY: ${{ secrets.LPG_MINIO_ACCESS_KEY }}
  LPG_MINIO_SECRET_KEY: ${{ secrets.LPG_MINIO_SECRET_KEY }}
  LPG_MINIO_BUCKET: ${{ secrets.LPG_MINIO_BUCKET }}
  LPG_GOOGLE_CLIENT_ID: ${{ secrets.LPG_GOOGLE_CLIENT_ID }}
  LPG_GOOGLE_CLIENT_SECRET: ${{ secrets.LPG_GOOGLE_CLIENT_SECRET }}
  LPG_REDIS_HOST: ${{ secrets.LPG_REDIS_HOST }}
  LPG_REDIS_PORT: ${{ secrets.LPG_REDIS_PORT }}
  LPG_REDIS_PASSWORD: ${{ secrets.LPG_REDIS_PASSWORD }}
  LPG_BACKEND_URL: ${{ secrets.LPG_BACKEND_URL }}
  LPG_APP_URL: ${{ secrets.LPG_APP_URL }}
  LPG_SAFARICOM_MPESA_URL: ${{ secrets.LPG_SAFARICOM_MPESA_URL }}
  LPG_MPESA_CALLBACK_BASE: ${{ secrets.LPG_MPESA_CALLBACK_BASE }}
  LPG_MPESA_CONSUMER_KEY: ${{ secrets.LPG_MPESA_CONSUMER_KEY }}
  LPG_MPESA_CONSUMER_SECRET: ${{ secrets.LPG_MPESA_CONSUMER_SECRET }}
  LPG_MPESA_PASS_KEY: ${{ secrets.LPG_MPESA_PASS_KEY }}
  LPG_MPESA_SHORT_CODE: ${{ secrets.LPG_MPESA_SHORT_CODE }}

permissions:
  actions: write
  attestations: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:

  build-dashboard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      - name: Build admin portal
        run: pnpm exec nx build dashboard

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: dashboard-build-output
          path: dist/

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      - name: Build backend
        run: pnpm exec nx build admin-portal

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-output
          path: dist/

  push-dashboard-to-registry:
    runs-on: ubuntu-latest
    needs: [build-dashboard]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: dashboard-build-output
          path: ./dist
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/dashboard/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/lpg-manager-admin-portal:latest

  push-backend-to-registry:
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build-output
          path: ./dist

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/lpg-manager-backend:latest

  deploy-backend-contabo:
    runs-on: ubuntu-latest
    needs: [push-backend-to-registry]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build-output
          path: ./dist

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Copy deployment file to remote server and apply it using SSH
      - name: Copy deployment file to server
        uses: appleboy/scp-action@v0.1.3
        with:
          source: './deployments/backend.yaml'
          target: '~/lpg_manager_deployments'
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: 22

      - name: Deploy to Kubernetes on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: 22
          script: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl delete deployment tahiniwa-backend
            kubectl delete svc tahiniwa-backend-service
            kubectl apply -f ~/lpg_manager_deployments/deployments/backend.yaml

  deploy-dashboard-contabo:
    runs-on: ubuntu-latest
    needs: [push-dashboard-to-registry]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: dashboard-build-output
          path: ./dist
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Copy deployments file to remote server and apply it using SSH
      - name: Copy deployment file to server
        uses: appleboy/scp-action@v0.1.3
        with:
          source: './deployments/dashboard.yaml'
          target: '~/lpg_manager_deployments'
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: 22

      - name: Deploy to Kubernetes on remote server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          port: 22
          script: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl delete deployment lpg-manger-admin-portal
            kubectl delete svc lpg-manger-admin-portal-service
            kubectl apply -f ~/lpg_manager_deployments/deployments/admin-portal.yaml
