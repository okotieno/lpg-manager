type BrandModel {
  id: UUID!
  name: String!
  companyName: String
  images: [FileUploadModel]
  catalogues: [CatalogueModel]
}

input CreateBrandCatalogueInput {
  id: UUID!
  name: String!
  description: String
  pricePerUnit: Float
  unit: CatalogueUnit!
  quantityPerUnit: Float!
}

input UpdateBrandCatalogueInput {
  id: UUID!
  name: String!
  description: String
  pricePerUnit: Float
  unit: CatalogueUnit!
  quantityPerUnit: Float!
}

input CreateBrandInput {
  name: String!
  companyName: String
  images: [SelectCategory]
  catalogues: [CreateBrandCatalogueInput]
}

input UpdateBrandInput {
  name: String!
  companyName: String
  images: [SelectCategory]
  catalogues: [UpdateBrandCatalogueInput]
}

type PaginatedBrand {
  items: [BrandModel]
  meta: Pagination
}

type CreateBrandSuccessResponse {
  message: String!
  data: BrandModel!
}

extend type Query {
  brands(query: QueryParams): PaginatedBrand!
  brand(id: UUID!): BrandModel
}

extend type Mutation {
  updateBrand(id: UUID!, params: UpdateBrandInput): CreateBrandSuccessResponse

  createBrand(params: CreateBrandInput): CreateBrandSuccessResponse

  deleteBrand(id: UUID!): DeleteSuccessResponse
}
