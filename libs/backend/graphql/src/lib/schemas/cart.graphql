enum CartStatus {
  PENDING
  COMPLETED
}

type CartCatalogueModel {
  id: UUID!
  catalogueId: UUID!
  quantity: Float!
  catalogue: CatalogueModel!
}

type CartModel {
  id: UUID!
  items: [CartCatalogueModel]!
  totalQuantity: Int
  totalPrice: Float
  status: CartStatus!
  expiresAt: DateTime!
}

input CartCatalogueInput {
  id: UUID!
  catalogueId: UUID!
  quantity: Float!
}

input CreateCartInput {
  items: [CartCatalogueInput]!
}

input UpdateCartInput {
  id: UUID!
  items: [CartCatalogueInput]!
}

type PaginatedCart {
  items: [CartModel]
  meta: Pagination
}

type CreateCartResponse {
  message: String!
  data: CartModel!
}

extend type Query {
  carts(query: QueryParams): PaginatedCart!
  cart(id: UUID!): CartModel
}

extend type Mutation {
  createCart(params: CreateCartInput): CreateCartResponse!
  addItemToCart(cartId: UUID, catalogueId: UUID!, quantity: Int!): CreateCartResponse!
  removeItemFromCart(cartId: UUID!, cartCatalogueId: UUID!): CreateCartResponse!
  updateItemQuantity(cartId: UUID!, cartCatalogueId: UUID!, quantity: Int!): CreateCartResponse!
  completeCart(cartId: UUID!): CreateCartResponse!
}
