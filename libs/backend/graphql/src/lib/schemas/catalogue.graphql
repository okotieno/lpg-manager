enum CatalogueUnit {
  KG
  LITRE
}

type CatalogueModel {
  id: UUID!
  name: String!
  description: String
  pricePerUnit: Float
  unit: CatalogueUnit!
  quantityPerUnit: Float!
  brandId: String!
  brand: BrandModel!
  inventories: [InventoryModel]
}

input CreateCatalogueInput {
  name: String!
  description: String
  pricePerUnit: Float
  unit: CatalogueUnit!
  quantityPerUnit: Float!
  brandId: String!
}

input UpdateCatalogueInput {
  name: String!
  description: String
  pricePerUnit: Float
  unit: CatalogueUnit!
  quantityPerUnit: Float!
  brandId: String!
}

type PaginatedCatalogue {
  items: [CatalogueModel]
  meta: Pagination
}

type CreateCatalogueSuccessResponse {
  message: String!
  data: CatalogueModel!
}

extend type Query {
  catalogues(query: QueryParams): PaginatedCatalogue!
  catalogue(id: UUID!): CatalogueModel
}

extend type Mutation {
  updateCatalogue(id: UUID!, params: UpdateCatalogueInput): CreateCatalogueSuccessResponse

  createCatalogue(params: CreateCatalogueInput): CreateCatalogueSuccessResponse

  deleteCatalogue(id: UUID!): DeleteSuccessResponse
}
