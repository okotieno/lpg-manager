enum DispatchStatus {
  PENDING
  INITIATED
  DEPOT_TO_DRIVER_CONFIRMED
  DRIVER_FROM_DEPOT_CONFIRMED
  IN_TRANSIT
  DELIVERING
  COMPLETED
}

type DispatchModel {
  id: UUID!
  transporterId: UUID!
  driverId: UUID!
  vehicleId: UUID!
  status: DispatchStatus!
  dispatchDate: DateTime!
  depotToDriverConfirmedAt: DateTime
  driverFromDepotConfirmedAt: DateTime
  transporter: TransporterModel!
  driver: DriverModel!
  vehicle: VehicleModel!
  orders: [OrderModel!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateDispatchInput {
  transporterId: UUID!
  driverId: UUID!
  vehicleId: UUID!
  dispatchDate: DateTime!
  orderIds: [UUID!]!
}

input UpdateDispatchInput {
  status: DispatchStatus
  dispatchDate: DateTime
}

type PaginatedDispatch {
  items: [DispatchModel]
  meta: Pagination
}

type CreateDispatchSuccessResponse {
  message: String!
  data: DispatchModel!
}

enum ScanConfirmDriverInventoryStatus {
  DRIVER_TO_DEALER_CONFIRMED
  DEALER_FROM_DRIVER_CONFIRMED
}

input ScanConfirmInput {
  dispatchId: UUID!
  scannedCanisters: [UUID!]!
  dispatchStatus: DispatchStatus!
  driverInventories: [SelectCategory]
  driverInventoryStatus: ScanConfirmDriverInventoryStatus
  depotId: SelectCategory
}

extend type Query {
  dispatches(query: QueryParams): PaginatedDispatch!
  dispatch(id: UUID!): DispatchModel
}

extend type Mutation {
  createDispatch(params: CreateDispatchInput!): CreateDispatchSuccessResponse!
  updateDispatch(id: UUID!, params: UpdateDispatchInput!): CreateDispatchSuccessResponse!
  deleteDispatch(id: UUID!): DeleteSuccessResponse!
  scanConfirm(params: ScanConfirmInput!): CreateDispatchSuccessResponse!
}
