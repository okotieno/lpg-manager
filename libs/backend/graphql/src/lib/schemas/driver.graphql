type DriverModel {
  id: UUID!
  transporterId: UUID!
  user: UserModel!
  licenseNumber: String!
  transporter: TransporterModel!
  vehicles: [VehicleModel!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateDriverInput {
  transporterId: UUID!
  name: String!
  licenseNumber: String!
  contactNumber: String!
}

input UpdateDriverInput {
  name: String
  licenseNumber: String
  contactNumber: String
}

type PaginatedDriver {
  items: [DriverModel]
  meta: Pagination
}

type CreateDriverSuccessResponse {
  message: String!
  data: DriverModel!
}

extend type Query {
  drivers(query: QueryParams): PaginatedDriver!
  driver(id: UUID!): DriverModel
}

extend type Mutation {
  createDriver(params: CreateDriverInput!): CreateDriverSuccessResponse!
  updateDriver(id: UUID!, params: UpdateDriverInput!): CreateDriverSuccessResponse!
  deleteDriver(id: UUID!): DeleteSuccessResponse!
}
