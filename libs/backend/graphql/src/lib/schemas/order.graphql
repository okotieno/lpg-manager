enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REJECTED
  DELIVERING
  RETURNED
}

type OrderItem {
  id: UUID!
  catalogueId: UUID!
  quantity: Int!
  catalogue: CatalogueModel!
}

type OrderModel {
  id: UUID!
  items: [OrderItem]!
  depot: StationModel!
  dealer: StationModel!
  totalQuantity: Int!
  totalPrice: Float!
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  dispatch: DispatchModel
}

input CreateOrderInput {
  items: [OrderItemInput]!
}

input OrderItemInput {
  catalogueId: UUID!
  quantity: Int!
}

input UpdateOrderInput {
  status: OrderStatus!
}

input UpdateOrderStatusInput {
  status: OrderStatus!
}

type CreateOrderResponse {
  message: String!
  data: OrderModel!
}

type UpdateOrderResponse {
  message: String!
  data: OrderModel!
}

type PaginatedOrder {
  items: [OrderModel]
  meta: Pagination
}

extend type Query {
  orders(query: QueryParams): PaginatedOrder!
  order(id: UUID!): OrderModel
}

extend type Mutation {
  createOrder(params: CreateOrderInput): CreateOrderResponse!
  updateOrder(id: UUID!, params: UpdateOrderInput): UpdateOrderResponse!
  deleteOrder(id: UUID!): DeleteSuccessResponse!
  updateOrderStatus(id: UUID!, params: UpdateOrderStatusInput!): UpdateOrderResponse!
}
