type TransporterModel {
  id: UUID!
  name: String!
  contactPerson: String!
  phone: String!
  drivers: [DriverModel]
  vehicles: [VehicleModel]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TransporterDriverInput {
  id: UUID!
  name: String!
  licenseNumber: String!
  phone: String!
  email: EmailAddress!
  vehicles: [UUID]
}
input TransporterVehicleInput {
  id:  UUID!
  registrationNumber: String!
  capacity: PositiveFloat!
  type: String!
}

input CreateTransporterInput {
  name: String!
  contactPerson: String!
  phone: String!
  drivers: [TransporterDriverInput]
  vehicles: [TransporterVehicleInput]
}

input UpdateTransporterInput {
  name: String!
  contactPerson: String!
  phone: String!
  drivers: [TransporterDriverInput]
  vehicles: [TransporterVehicleInput]
}

type PaginatedTransporter {
  items: [TransporterModel]
  meta: Pagination
}
type CreateTransporterSuccessResponse {
  message: String!
  data: TransporterModel!
}

type TransporterCount {
  count: Int!
}

extend type Query {
  transporters(query: QueryParams): PaginatedTransporter!
  transporter(id: UUID!): TransporterModel
  transporterCount: TransporterCount!
}

extend type Mutation {
  createTransporter(params: CreateTransporterInput!): CreateTransporterSuccessResponse!
  updateTransporter(id: UUID!, params: UpdateTransporterInput!): CreateTransporterSuccessResponse!
  deleteTransporter(id: UUID!): DeleteSuccessResponse!
}
