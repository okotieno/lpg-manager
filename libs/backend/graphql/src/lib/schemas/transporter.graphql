type TransporterModel {
  id: UUID!
  name: String!
  contactPerson: String!
  contactNumber: String!
  drivers: [DriverModel]
  vehicles: [VehicleModel]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateTransporterInput {
  name: String!
  contactPerson: String!
  contactNumber: String!
}

input UpdateTransporterInput {
  name: String
  contactPerson: String
  contactNumber: String
}

type PaginatedTransporter {
  items: [TransporterModel]
  meta: Pagination
}
type CreateTransporterSuccessResponse {
  message: String!
  data: TransporterModel!
}

extend type Query {
  transporters(query: QueryParams): PaginatedTransporter!
  transporter(id: UUID!): TransporterModel
}

extend type Mutation {
  createTransporter(params: CreateTransporterInput!): CreateTransporterSuccessResponse!
  updateTransporter(id: UUID!, params: UpdateTransporterInput!): CreateTransporterSuccessResponse!
  deleteTransporter(id: UUID!): DeleteSuccessResponse!
}
