type UserRole {
  id: UUID!
  roleId: UUID!
  userId: UUID!
  stationId: UUID!
  role: RoleModel
  station: StationModel
  driver: DriverModel
}
type UserModel {
  id: UUID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  emailVerifiedAt: String
  phoneVerifiedAt: String
  profilePhotoLink: String
  createdAt: String
  updatedAt: String
  roles: [UserRole]
}

type PaginatedUser {
  items: [UserModel]
  meta: Pagination
}
type PaginatedUserRoles {
  items: [RoleModel]
  meta: Pagination
}

type UserCount {
  count: Int!
}

extend type Query {
  users(query: QueryParams): PaginatedUser!
  user(id: UUID!): UserModel

  userRoles(userId: UUID): PaginatedUserRoles

  userCount: UserCount!
}

input CreateUserInput {
  firstName : String!
  middleName: String
  lastName : String!
  email : String!
  phone : String
  roles: [UserRoleInput]
}

input UpdateUserInput {
  firstName : String!
  middleName: String
  lastName : String!
  email : String!
  phone : String
  roles: [UserRoleInput]
}

type CreateUserSuccessResponse  {
  message: String!
  data: UserModel!
}

input CountriesLanguagesInput {
  countryId: Int!
  languageId: Int!
}

extend type Mutation {
  updateUser(id: UUID!, params: UpdateUserInput): CreateUserSuccessResponse

  createUser(params: CreateUserInput): CreateUserSuccessResponse

  deleteUser(id: UUID!): DeleteSuccessResponse!
}
